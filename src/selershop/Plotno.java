/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Plotno.java
 *
 * Created on 2011-06-02, 19:04:32
 */
package selershop;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.image.RescaleOp;
/**
 *
 * @author Seler
 */
public class Plotno extends javax.swing.JPanel {
    File plik;
    BufferedImage obrazek;
    int typ;
    /** Creates new form Plotno */
    public Plotno() {
        obrazek = null;
        plik = null;
        setSize(800, 800);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void paint(Graphics g)
    {
        if (obrazek != null) {
            g.drawImage(obrazek, 0, 0, obrazek.getWidth(), obrazek.getHeight() , null);
        }
    }
    
    public void Otworz() throws IOException{
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filtr = new FileNameExtensionFilter("Pliki *.jpg *.png","jpg", "jpeg", "png");
            chooser.setFileFilter(filtr);
            int wynik = chooser.showOpenDialog(this);        
            if (wynik == JFileChooser.APPROVE_OPTION) {
                plik = chooser.getSelectedFile();
                obrazek = ImageIO.read(plik);
                typ = obrazek.getType();
                if (plik != null) {
                    this.setSize(obrazek.getWidth(), obrazek.getHeight());
                }
            }
        repaint();
    }
    
    public void Resetuj() throws IOException
    {
        obrazek = ImageIO.read(plik);
        repaint();
    }
    public void Zapisz() throws IOException
    {
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filtr = new FileNameExtensionFilter("Pliki *.jpg *.png","jpg", "jpeg", "png");
        chooser.setFileFilter(filtr);
        chooser.showSaveDialog(this);
        String sciezka = chooser.getSelectedFile().toString();
        if (sciezka.contains(".jpg") || sciezka.contains(".jpeg"))
            ImageIO.write(obrazek, "jpg", new File(sciezka));
        else if (sciezka.contains(".png"))
            ImageIO.write(obrazek, "png", new File(sciezka));
        else {
            switch (typ)
            {
                case 5: sciezka += ".jpg";
                        ImageIO.write(obrazek, "jpg", new File(sciezka));
                        break;
                case 6: sciezka += ".png";
                        ImageIO.write(obrazek, "png", new File(sciezka));
                        break;
            }
        }
    }
    
    public void Punkt(Float a, Float b){
        RescaleOp op = new RescaleOp(a, b, null);
        BufferedImage nowy_obrazek = new BufferedImage(obrazek.getWidth(), obrazek.getHeight(), obrazek.getType());
        op.filter(obrazek, nowy_obrazek);
        obrazek = nowy_obrazek;
        repaint();
    }
    
    public void Splot(float[] matrix, int rozmiar)
    {
        Kernel kernel = new Kernel(rozmiar, rozmiar, matrix);
        ConvolveOp op = new ConvolveOp(kernel);
        BufferedImage nowy_obrazek = new BufferedImage(obrazek.getWidth(), obrazek.getHeight(), obrazek.getType());
        op.filter(obrazek, nowy_obrazek);
        obrazek = nowy_obrazek;
        repaint();
    }
}
